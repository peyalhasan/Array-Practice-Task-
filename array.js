
/** 
 *   Lavel 1 Problems    
 */

//Task 1 -> рззя╕ПтГг ржПржХржЯрж╛ рзлржЯрж╛ рж░ржЩрзЗрж░ ржирж╛ржорзЗрж░ ржЕрзНржпрж╛рж░рзЗ ржмрж╛ржирж╛ржУ ржПржмржВ ржПрж░ length ржкрзНрж░рж┐ржирзНржЯ ржХрж░рзЛред

const colors = ['Red', 'Green', 'Blue', 'Purple', 'Black'];
console.log(colors.length);

// Task 2 -> рзия╕ПтГг ["Apple", "Banana", "Mango"] ржХрзЗ ржПржХ рж▓рж╛ржЗржирзЗ string ржП ржкрж░рж┐ржгржд ржХрж░рзЛред

const fruits = ['Apple', 'Banana', 'Mango'];
console.log(fruits.toString()) // toString
console.log(fruits.join(','))  // join

// Task 3 -> рзйя╕ПтГг ["A", "B", "C", "D"] ржЕрзНржпрж╛рж░рзЗ ржерзЗржХрзЗ рзйрзЯ ржЖржЗржЯрзЗржоржЯрж┐ ржкрзНрж░рж┐ржирзНржЯ ржХрж░рзЛред

const letters = ['A', 'B', 'C', 'D']
console.log(letters.at(2))  // at(index) .at also take negative value and retrun from end of the array 
console.log(letters[2])     // [index]

// Task 4 -> рзкя╕ПтГг ["Learning", "JavaScript", "is", "fun"] ржХрзЗ ржПржХрж╕рж╛ржерзЗ ржХрж░рзЗ ржПржХржЯрж╛ ржмрж╛ржХрзНржп ржмрж╛ржирж╛ржУред

const sentence = ["Learning", "JavaScript", "is", "fun"]
console.log(sentence.join(' '))

// Task 5 -> рзля╕ПтГг ["pen", "pencil", "eraser", "sharpener"] ржерзЗржХрзЗ рж╢рзЗрж╖рзЗрж░ ржЖржЗржЯрзЗржоржЯрж╛ рж╕рж░рж╛ржУред

const items = ["pen", "pencil", "eraser", "sharpener"];
const item = items.pop()
console.log(items)

// Task 6 -> рзмя╕ПтГг ржЙржкрж░рзЗрж░ ржЕрзНржпрж╛рж░рзЗржЯрж╛рждрзЗ "marker" ржпрзЛржЧ ржХрж░рзЛ рж╢рзЗрж╖рзЗред

items.push('marker')
console.log(items)

// Task 7 -> рзня╕ПтГг ["Dhaka", "Chittagong", "Khulna"] ржЕрзНржпрж╛рж░рзЗ ржерзЗржХрзЗ ржкрзНрж░ржержо ржЖржЗржЯрзЗржо рж╕рж░рж╛ржУред

const city = ["Dhaka", "Chittagong", "Khulna"] ;
city.shift();
console.log(city)

//Task 8 -> рзоя╕ПтГг ржР ржПржХржЗ ржЕрзНржпрж╛рж░рзЗрждрзЗ рж╢рзБрж░рзБрждрзЗ "Rajshahi" ржпрзЛржЧ ржХрж░рзЛред

city.unshift('Rajshahi')
console.log(city)


/**
 *  Lavel 2 Problems
 */

//Task 9 -> рзпя╕ПтГг ["A", "B", "C"] ржПржмржВ ["D", "E"] ржПржХрж╕рж╛ржерзЗ ржЬрзЛрзЬрж╛ рж▓рж╛ржЧрж╛ржУред

const a= ['A', 'B', 'C'];
const b= ['D', 'E'];
console.log(a.concat(b))

//Task 10 -> ЁЯФЯ [10, 20, 30, 40, 50, 60] ржерзЗржХрзЗ ржирждрзБржи ржПржХржЯрж╛ ржЕрзНржпрж╛рж░рзЗ ржмрж╛ржирж╛ржУ ржпрзЗржЦрж╛ржирзЗ рж╢рзБржзрзБ [20, 30, 40] ржерж╛ржХржмрзЗред

const numbers = [10, 20, 30, 40, 50, 60];
console.log(numbers.slice(1,4));

// Task 11 -> рззя╕ПтГг ржирж┐ржЪрзЗрж░ ржХрзЛржбрзЗ ржжрзНржмрж┐рждрзАрзЯ ржЖржЗржЯрзЗржо ржбрж┐рж▓рж┐ржЯ ржХрж░рзЛ, ржХрж┐ржирзНрждрзБ splice() ржмрзНржпржмрж╣рж╛рж░ ржХрзЛрж░рзЛ ржирж╛ред

delete numbers[1];
console.log(numbers)

/**
 * Lavel 3 Problems 
 */

//Task 12 -> рзия╕ПтГг ржирж┐ржЪрзЗрж░ ржХрзЛржбрзЗ ржкрзНрж░ржержо ржжрзБржЗржЯрж╛ ржЖржЗржЯрзЗржо ржХржкрж┐ ржХрж░рзЗ рж╢рзЗрж╖рзЗрж░ ржжрж┐ржХрзЗ ржмрж╕рж╛ржУред

const number = [1, 2, 3, 4, 5, 6, 7]
const copy = number.copyWithin(4, 0, 3) // copy start form 0 and end at 3 and it will replace index 4, 5,6
console.log(copy)

// Task 13 -> рзйя╕ПтГг [1, [2, 3], [4, [5]]] ржПржЗ nested ржЕрзНржпрж╛рж░рзЗржЯрж╛ржХрзЗ ржПржХ рж▓рзЗржнрзЗрж▓рзЗ ржирж┐рзЯрзЗ ржЖрж╕рзЛред

const num = [1, [2, 3], [4, [2,[5]]]];
const c = num.flat(3) // Here Flatten the array up to 3 levels deep. 
console.log(c)

// Task 14 -> рзкя╕ПтГг ржирж┐ржЪрзЗрж░ ржЕрзНржпрж╛рж░рзЗ ржерзЗржХрзЗ ржорж╛ржЭрзЗрж░ рзиржЯрж╛ ржЖржЗржЯрзЗржо replace ржХрж░рзЛ 99 ржПржмржВ 100 ржжрж┐рзЯрзЗред

const replace = [10, 20, 30, 40, 50];
const rep = replace.splice(2,2,99,100)  // splice modidy original array
console.log(replace)


// Task 15 -> рзля╕ПтГг ржирж┐ржЪрзЗрж░ ржХрзЛржбрзЗрж░ ржЖржЙржЯржкрзБржЯ ржХрзА рж╣ржмрзЗ ржмрж▓рзЗ ржоржирзЗ ржХрж░рзЛ?
let d = [1, 2, 3, 4, 5];
let e = d.slice(1, 4);
let f = d.splice(1, 4);
console.log(d, e, f);

// Task 16 -> рзмя╕ПтГг ржирж┐ржЪрзЗрж░ ржЕрзНржпрж╛рж░рзЗрждрзЗ "banana" рж░рж┐ржорзБржн ржХрж░рзЛ, ржХрж┐ржирзНрждрзБ ржЖрж╕рж▓ ржЕрзНржпрж╛рж░рзЗржЯрж╛ ржпрзЗржи ржирж╛ ржкрж░рж┐ржмрж░рзНрждржи рж╣рзЯред

const fruit = ['apple', 'banana', 'cherry'];
const newfruit = fruit.toSpliced(1,1) // It's return a new array with copyed data
console.log(newfruit)

// Task 17 -> рзня╕ПтГг ржирж┐ржЪрзЗрж░ ржЕрзНржпрж╛рж░рзЗржЯрж╛ржХрзЗ ржЙрж▓рзНржЯрзЛ ржХрж░рзЗ ржжрж╛ржУ, ржХрж┐ржирзНрждрзБ .reverse() ржмрзНржпржмрж╣рж╛рж░ ржХрзЛрж░рзЛ ржирж╛ред

// first way 
const js = ['JS', 'love', 'I']
const newJs = [];
for (const ne of js){
    newJs.unshift(ne)
}
console.log(newJs)

// second way
const newJs2= [];
 
for(let i = js.length ; i>0; i--){
    newJs2.push(js.pop())
}
console.log(newJs2)

// Task 18 -> рзоя╕ПтГг ржирж┐ржЪрзЗрж░ nested ржЕрзНржпрж╛рж░рзЗ ржерзЗржХрзЗ рж╢рзБржзрзБ "c" ржкрзНрж░рж┐ржирзНржЯ ржХрж░рзЛред

const nasted = [['a', 'b'], ['c', 'd'], [['e', f]]]
console.log(nasted[1][0])
